/ Begin slides
%section#title-slide.slide
  %h1 Expresiones Regulares.

%section#que-son.slide
  %h2 ¿Para qué sirven las expresiones regulares?
  %ul
    %li.slide#que-son-extraer
      %h3 Para extraer información de un texto.
      %p Por ejemplo extraer una IP de un bloque de texto.
    %li.slide#que-son-modificar
      %h3 Para modificar un bloque de texto.
      %p Por ejemplo para reemplazar una cadena por otra dentro de un bloque de texto.
    %li.slide#que-son-donde
      %h3
        Se pueden usar en
        %span{style: "color: #C00"} cualquier
        lenguaje, por ejemplo: Bash.

%section#sintaxis.slide
  %h2 Sintáxis
  %p.slide
    Las expresiones regulares están compuestas por una cadena, conocida como
    <em>patrón</em> rodeada por ambos lados de un delimitador, generalmente <code>'/'</code>:
  %pre.slide.bold.center
    %code
      :preserve
        /Hola, (.*)/
  %p.slide
    Ciertos caracteres toman signficados distintos al símbolo al que representa
    en el contexto de las expresiones regulares. Estos símbolos especiales son:
  %pre.slide.bold.center
    %code
      :preserve
        . * ? + ^ $ [ ] ( ) | \

  .slide
    :markdown
      Para referirnos al símbolo real tenemos que preceder cada uno de los
      anteriores símbolos por ```\```.

%section#ejemplos.slide
  %h2 Formato de los ejemplos

  .slide
    :markdown
      ### Comandos Unix

      En esta presentación vamos a evaluar expresiones regulares a través de comandos **Unix** como: **grep** y **sed**.

  .slide
    :markdown
      ### Particularidad de grep

      Rodeamos el patrón por el símbolo <code>'</code>

      Utilizaremos el modificador **-E** para que harán que nuestras expresiones regulares se comporten más como las universales.

  %pre.slide.bold.center
    %code
      :preserve
        grep -E 'Hola, (.*)'

%section#sencillo.slide
  %h2 La expresión regular más sencilla

  .slide
    %p
      No usamos caracteres especiales:
    %pre.slide.bold
      %code
        :preserve
          echo 'Hola Mundo' | grep 'Hola Mundo'
          <span style="color: green">Hola Mundo</span>

  .slide
    %p
      Podemos buscar una subcadena:
    %pre.slide.bold
      %code
        :preserve
          echo 'Hola Mundo' | grep 'la Mun'
          Ho<span style="color: green">la Mun</span>do

  .slide
    %p
      El comando no devuelve nada si no encuentra el patrón:
    %pre.slide.bold
      %code
        :preserve
          echo 'Hala Mundo' | grep 'Hola Mundo'

  .slide
    %p
      ¡Y cuidado porque es case-sensitive!
    %pre.slide.bold
      %code
        :preserve
          echo 'HOLA MUNDO' | grep 'Hola Mundo'

%section#punto.slide
  %h2 El punto

  %ul
    %li.slide El punto <code>'.'</code> es el símbolo especial más importante.
    %li.slide Representa cualquier caracter, alfanumérico o no, incluso <em>espacio</em> y <em>TAB</em>.
    %li.slide Solo una ocurrencia.

  %pre.slide.bold
    %code
      :preserve
        echo 'Hola Mundo' | grep 'H.la Mundo'
        <span style="color: green">Hola Mundo</span>

  .slide
    %p
      Ejemplo de subcadena:
    %pre.slide.bold
      %code
        :preserve
          echo 'Hola Mundo' | grep '.a.M..'
          Ho<span style="color: green">la Mun</span>do

  .slide
    %p
      El comando no devuelve nada si no encuentra el patrón:
    %pre.slide.bold
      %code
        :preserve
          echo 'Hala Mundo' | grep 'H.a Mundo'

